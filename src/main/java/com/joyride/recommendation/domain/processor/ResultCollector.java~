package com.joyride.recommendation.domain;

import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.stereotype.Component;

import java.util.Comparator;
import java.util.PriorityQueue;

@Component
class ResultCollector {
    public PriorityQueue<JSONObject> collectTopHits(JSONArray responses, int topN) {
        PriorityQueue<JSONObject> topHits = new PriorityQueue<>(topN,
                Comparator.comparingDouble(hit -> -hit.optDouble("_score", 0.0)));

        for (int i = 0; i < responses.length(); i++) {
            JSONObject hitsObj = responses.getJSONObject(i).optJSONObject("hits");
            if (hitsObj == null) continue;
            JSONArray hits = hitsObj.optJSONArray("hits");
            if (hits == null) continue;

            processHits(hits, topHits, topN);
        }

        return topHits;
    }

    private void processHits(JSONArray hits, PriorityQueue<JSONObject> topHits, int topN) {
        for (int j = 0; j < hits.length(); j++) {
            JSONObject hit = hits.optJSONObject(j);
            if (hit == null || hit.optJSONObject("_source") == null) continue;

            if (topHits.size() < topN) {
                topHits.offer(hit);
            } else if (hit.optDouble("_score", 0.0) > topHits.peek().optDouble("_score", 0.0)) {
                topHits.poll();
                topHits.offer(hit);
            }
        }
    }
}